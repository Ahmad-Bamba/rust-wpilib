/* automatically generated by rust-bindgen */

#![allow(dead_code,
         non_camel_case_types,
         non_upper_case_globals,
         non_snake_case)]
pub type int8_t = i8;
pub type int16_t = i16;
pub type int32_t = i32;
pub type int64_t = i64;
pub type uint8_t = u8;
pub type uint16_t = u16;
pub type uint32_t = u32;
pub type uint64_t = u64;
pub type int_least8_t = ::std::os::raw::c_char;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_long;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulong;
pub type int_fast8_t = ::std::os::raw::c_char;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intptr_t = isize;
pub type uintptr_t = usize;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
pub type HAL_Handle = int32_t;
pub type HAL_PortHandle = HAL_Handle;
pub type HAL_AnalogInputHandle = HAL_Handle;
pub type HAL_AnalogOutputHandle = HAL_Handle;
pub type HAL_AnalogTriggerHandle = HAL_Handle;
pub type HAL_CompressorHandle = HAL_Handle;
pub type HAL_CounterHandle = HAL_Handle;
pub type HAL_DigitalHandle = HAL_Handle;
pub type HAL_DigitalPWMHandle = HAL_Handle;
pub type HAL_EncoderHandle = HAL_Handle;
pub type HAL_FPGAEncoderHandle = HAL_Handle;
pub type HAL_GyroHandle = HAL_Handle;
pub type HAL_InterruptHandle = HAL_Handle;
pub type HAL_NotifierHandle = HAL_Handle;
pub type HAL_RelayHandle = HAL_Handle;
pub type HAL_SolenoidHandle = HAL_Handle;
pub type HAL_Bool = int32_t;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum HAL_AccelerometerRange {
    HAL_AccelerometerRange_k2G = 0,
    HAL_AccelerometerRange_k4G = 1,
    HAL_AccelerometerRange_k8G = 2,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum HAL_AnalogTriggerType {
    HAL_Trigger_kInWindow = 0,
    HAL_Trigger_kState = 1,
    HAL_Trigger_kRisingPulse = 2,
    HAL_Trigger_kFallingPulse = 3,
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct tCANStreamMessage {
    pub messageID: uint32_t,
    pub timeStamp: uint32_t,
    pub data: [uint8_t; 8usize],
    pub dataSize: uint8_t,
}
impl ::std::default::Default for tCANStreamMessage {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type ptrdiff_t = isize;
pub type size_t = usize;
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __clang_max_align_nonce2: f64,
}
impl ::std::default::Default for max_align_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type NiFpga_Bool = uint8_t;
pub type NiFpga_Status = int32_t;
pub type NiFpga_Session = uint32_t;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum NiFpga_OpenAttribute { NiFpga_OpenAttribute_NoRun = 1, }
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum NiFpga_CloseAttribute {
    NiFpga_CloseAttribute_NoResetIfLastSession = 1,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum NiFpga_RunAttribute { NiFpga_RunAttribute_WaitUntilDone = 1, }
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum NiFpga_Irq {
    NiFpga_Irq_0 = 1,
    NiFpga_Irq_1 = 2,
    NiFpga_Irq_2 = 4,
    NiFpga_Irq_3 = 8,
    NiFpga_Irq_4 = 16,
    NiFpga_Irq_5 = 32,
    NiFpga_Irq_6 = 64,
    NiFpga_Irq_7 = 128,
    NiFpga_Irq_8 = 256,
    NiFpga_Irq_9 = 512,
    NiFpga_Irq_10 = 1024,
    NiFpga_Irq_11 = 2048,
    NiFpga_Irq_12 = 4096,
    NiFpga_Irq_13 = 8192,
    NiFpga_Irq_14 = 16384,
    NiFpga_Irq_15 = 32768,
    NiFpga_Irq_16 = 65536,
    NiFpga_Irq_17 = 131072,
    NiFpga_Irq_18 = 262144,
    NiFpga_Irq_19 = 524288,
    NiFpga_Irq_20 = 1048576,
    NiFpga_Irq_21 = 2097152,
    NiFpga_Irq_22 = 4194304,
    NiFpga_Irq_23 = 8388608,
    NiFpga_Irq_24 = 16777216,
    NiFpga_Irq_25 = 33554432,
    NiFpga_Irq_26 = 67108864,
    NiFpga_Irq_27 = 134217728,
    NiFpga_Irq_28 = 268435456,
    NiFpga_Irq_29 = 536870912,
    NiFpga_Irq_30 = 1073741824,
    NiFpga_Irq_31 = 2147483648,
}
pub type NiFpga_IrqContext = *mut ::std::os::raw::c_void;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum HAL_Counter_Mode {
    HAL_Counter_kTwoPulse = 0,
    HAL_Counter_kSemiperiod = 1,
    HAL_Counter_kPulseLength = 2,
    HAL_Counter_kExternalDirection = 3,
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct HAL_ControlWord {
    pub data: u32,
}
// TODO(Kyle) Check the memory layout of C bitfields on RoboRIO
impl HAL_ControlWord {
    pub fn enabled(&self) -> bool {
        self.data & (1 << 31) != 0u32
    }
    pub fn autonomous(&self) -> bool {
        self.data & (1 << 30) != 0u32
    }
    pub fn test(&self) -> bool {
        self.data & (1 << 29) != 0u32
    }
    pub fn eStop(&self) -> bool {
        self.data & (1 << 28) != 0u32
    }
    pub fn fmsAttached(&self) -> bool {
        self.data & (1 << 27) != 0u32
    }
    pub fn dsAttached(&self) -> bool {
        self.data & (1 << 26) != 0u32
    }
}
impl ::std::default::Default for HAL_ControlWord {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum HAL_AllianceStationID {
    HAL_AllianceStationID_kRed1 = 0,
    HAL_AllianceStationID_kRed2 = 1,
    HAL_AllianceStationID_kRed3 = 2,
    HAL_AllianceStationID_kBlue1 = 3,
    HAL_AllianceStationID_kBlue2 = 4,
    HAL_AllianceStationID_kBlue3 = 5,
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct HAL_JoystickAxes {
    pub count: int16_t,
    pub axes: [f32; 12usize],
}
impl ::std::default::Default for HAL_JoystickAxes {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct HAL_JoystickPOVs {
    pub count: int16_t,
    pub povs: [int16_t; 12usize],
}
impl ::std::default::Default for HAL_JoystickPOVs {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct HAL_JoystickButtons {
    pub buttons: uint32_t,
    pub count: uint8_t,
}
impl ::std::default::Default for HAL_JoystickButtons {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct HAL_JoystickDescriptor {
    pub isXbox: uint8_t,
    pub type_: uint8_t,
    pub name: [::std::os::raw::c_char; 256usize],
    pub axisCount: uint8_t,
    pub axisTypes: [uint8_t; 12usize],
    pub buttonCount: uint8_t,
    pub povCount: uint8_t,
}
impl ::std::clone::Clone for HAL_JoystickDescriptor {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for HAL_JoystickDescriptor {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum HAL_EncoderIndexingType {
    HAL_kResetWhileHigh = 0,
    HAL_kResetWhileLow = 1,
    HAL_kResetOnFallingEdge = 2,
    HAL_kResetOnRisingEdge = 3,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum HAL_EncoderEncodingType {
    HAL_Encoder_k1X = 0,
    HAL_Encoder_k2X = 1,
    HAL_Encoder_k4X = 2,
}
pub type HAL_InterruptHandlerFunction =
    ::std::option::Option<unsafe extern "C" fn(interruptAssertedMask:
                                                   uint32_t,
                                               param:
                                                   *mut ::std::os::raw::c_void)>;
pub type HAL_NotifierProcessFunction =
    ::std::option::Option<extern "C" fn(currentTime: uint64_t,
                                        handle: HAL_NotifierHandle)>;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum HAL_SerialPort {
    HAL_SerialPort_Onboard = 0,
    HAL_SerialPort_MXP = 1,
    HAL_SerialPort_USB1 = 2,
    HAL_SerialPort_USB2 = 3,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum idtype_t { P_ALL = 0, P_PID = 1, P_PGID = 2, }
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_char;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
impl ::std::default::Default for __fsid_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __qaddr_t = *mut __quad_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct wait {
    pub _bindgen_data_: [u32; 1usize],
}
impl wait {
    pub unsafe fn w_status(&mut self) -> *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __wait_terminated(&mut self) -> *mut Struct_Unnamed1 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __wait_stopped(&mut self) -> *mut Struct_Unnamed2 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for wait {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Struct_Unnamed1 {
    pub _bindgen_bitfield_1_: ::std::os::raw::c_uint,
}
impl ::std::default::Default for Struct_Unnamed1 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Struct_Unnamed2 {
    pub _bindgen_bitfield_1_: ::std::os::raw::c_uint,
}
impl ::std::default::Default for Struct_Unnamed2 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __WAIT_STATUS {
    pub _bindgen_data_: [u64; 1usize],
}
impl __WAIT_STATUS {
    pub unsafe fn __uptr(&mut self) -> *mut *mut wait {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __iptr(&mut self) -> *mut *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for __WAIT_STATUS {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
impl ::std::default::Default for div_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
impl ::std::default::Default for ldiv_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
impl ::std::default::Default for lldiv_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type ssize_t = isize;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type time_t = __time_t;
pub type clockid_t = __clockid_t;
pub type timer_t = __timer_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint_ = ::std::os::raw::c_uint;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulong;
pub type register_t = ::std::os::raw::c_long;
pub type __sig_atomic_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
impl ::std::default::Default for __sigset_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
impl ::std::default::Default for timespec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
impl ::std::default::Default for timeval {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
impl ::std::default::Default for fd_set {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type fd_mask = __fd_mask;
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy)]
pub struct pthread_attr_t {
    pub _bindgen_data_: [u64; 7usize],
}
impl pthread_attr_t {
    pub unsafe fn __size(&mut self)
     -> *mut [::std::os::raw::c_char; 56usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for pthread_attr_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for pthread_attr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
impl ::std::default::Default for __pthread_internal_list {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Copy)]
pub struct pthread_mutex_t {
    pub _bindgen_data_: [u64; 5usize],
}
impl pthread_mutex_t {
    pub unsafe fn __data(&mut self) -> *mut __pthread_mutex_s {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __size(&mut self)
     -> *mut [::std::os::raw::c_char; 40usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for pthread_mutex_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for pthread_mutex_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
impl ::std::default::Default for __pthread_mutex_s {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct pthread_mutexattr_t {
    pub _bindgen_data_: [u32; 1usize],
}
impl pthread_mutexattr_t {
    pub unsafe fn __size(&mut self) -> *mut [::std::os::raw::c_char; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for pthread_mutexattr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct pthread_cond_t {
    pub _bindgen_data_: [u64; 6usize],
}
impl pthread_cond_t {
    pub unsafe fn __data(&mut self) -> *mut Struct_Unnamed3 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __size(&mut self)
     -> *mut [::std::os::raw::c_char; 48usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_longlong {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for pthread_cond_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for pthread_cond_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Struct_Unnamed3 {
    pub __lock: ::std::os::raw::c_int,
    pub __futex: ::std::os::raw::c_uint,
    pub __total_seq: ::std::os::raw::c_ulonglong,
    pub __wakeup_seq: ::std::os::raw::c_ulonglong,
    pub __woken_seq: ::std::os::raw::c_ulonglong,
    pub __mutex: *mut ::std::os::raw::c_void,
    pub __nwaiters: ::std::os::raw::c_uint,
    pub __broadcast_seq: ::std::os::raw::c_uint,
}
impl ::std::default::Default for Struct_Unnamed3 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct pthread_condattr_t {
    pub _bindgen_data_: [u32; 1usize],
}
impl pthread_condattr_t {
    pub unsafe fn __size(&mut self) -> *mut [::std::os::raw::c_char; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for pthread_condattr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct pthread_rwlock_t {
    pub _bindgen_data_: [u64; 7usize],
}
impl pthread_rwlock_t {
    pub unsafe fn __data(&mut self) -> *mut Struct_Unnamed4 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __size(&mut self)
     -> *mut [::std::os::raw::c_char; 56usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for pthread_rwlock_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for pthread_rwlock_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Struct_Unnamed4 {
    pub __lock: ::std::os::raw::c_int,
    pub __nr_readers: ::std::os::raw::c_uint,
    pub __readers_wakeup: ::std::os::raw::c_uint,
    pub __writer_wakeup: ::std::os::raw::c_uint,
    pub __nr_readers_queued: ::std::os::raw::c_uint,
    pub __nr_writers_queued: ::std::os::raw::c_uint,
    pub __writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_char,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
impl ::std::default::Default for Struct_Unnamed4 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct pthread_rwlockattr_t {
    pub _bindgen_data_: [u64; 1usize],
}
impl pthread_rwlockattr_t {
    pub unsafe fn __size(&mut self) -> *mut [::std::os::raw::c_char; 8usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for pthread_rwlockattr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct pthread_barrier_t {
    pub _bindgen_data_: [u64; 4usize],
}
impl pthread_barrier_t {
    pub unsafe fn __size(&mut self)
     -> *mut [::std::os::raw::c_char; 32usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for pthread_barrier_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct pthread_barrierattr_t {
    pub _bindgen_data_: [u32; 1usize],
}
impl pthread_barrierattr_t {
    pub unsafe fn __size(&mut self) -> *mut [::std::os::raw::c_char; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for pthread_barrierattr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct random_data {
    pub fptr: *mut int32_t,
    pub rptr: *mut int32_t,
    pub state: *mut int32_t,
    pub rand_type: ::std::os::raw::c_int,
    pub rand_deg: ::std::os::raw::c_int,
    pub rand_sep: ::std::os::raw::c_int,
    pub end_ptr: *mut int32_t,
}
impl ::std::default::Default for random_data {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct drand48_data {
    pub __x: [::std::os::raw::c_ushort; 3usize],
    pub __old_x: [::std::os::raw::c_ushort; 3usize],
    pub __c: ::std::os::raw::c_ushort,
    pub __init: ::std::os::raw::c_ushort,
    pub __a: ::std::os::raw::c_ulonglong,
}
impl ::std::default::Default for drand48_data {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __compar_fn_t =
    ::std::option::Option<unsafe extern "C" fn(arg1:
                                                   *const ::std::os::raw::c_void,
                                               arg2:
                                                   *const ::std::os::raw::c_void)
                              -> ::std::os::raw::c_int>;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum HAL_RuntimeType { HAL_Athena = 0, HAL_Mock = 1, }
extern "C" {
    pub fn HAL_SetAccelerometerActive(active: HAL_Bool);
    pub fn HAL_SetAccelerometerRange(range: HAL_AccelerometerRange);
    pub fn HAL_GetAccelerometerX() -> f64;
    pub fn HAL_GetAccelerometerY() -> f64;
    pub fn HAL_GetAccelerometerZ() -> f64;
    pub fn HAL_IsAccumulatorChannel(analogPortHandle: HAL_AnalogInputHandle,
                                    status: *mut int32_t) -> HAL_Bool;
    pub fn HAL_InitAccumulator(analogPortHandle: HAL_AnalogInputHandle,
                               status: *mut int32_t);
    pub fn HAL_ResetAccumulator(analogPortHandle: HAL_AnalogInputHandle,
                                status: *mut int32_t);
    pub fn HAL_SetAccumulatorCenter(analogPortHandle: HAL_AnalogInputHandle,
                                    center: int32_t, status: *mut int32_t);
    pub fn HAL_SetAccumulatorDeadband(analogPortHandle: HAL_AnalogInputHandle,
                                      deadband: int32_t,
                                      status: *mut int32_t);
    pub fn HAL_GetAccumulatorValue(analogPortHandle: HAL_AnalogInputHandle,
                                   status: *mut int32_t) -> int64_t;
    pub fn HAL_GetAccumulatorCount(analogPortHandle: HAL_AnalogInputHandle,
                                   status: *mut int32_t) -> int64_t;
    pub fn HAL_GetAccumulatorOutput(analogPortHandle: HAL_AnalogInputHandle,
                                    value: *mut int64_t, count: *mut int64_t,
                                    status: *mut int32_t);
    pub fn HAL_InitializeAnalogGyro(handle: HAL_AnalogInputHandle,
                                    status: *mut int32_t) -> HAL_GyroHandle;
    pub fn HAL_SetupAnalogGyro(handle: HAL_GyroHandle, status: *mut int32_t);
    pub fn HAL_FreeAnalogGyro(handle: HAL_GyroHandle);
    pub fn HAL_SetAnalogGyroParameters(handle: HAL_GyroHandle,
                                       voltsPerDegreePerSecond: f64,
                                       offset: f64, center: int32_t,
                                       status: *mut int32_t);
    pub fn HAL_SetAnalogGyroVoltsPerDegreePerSecond(handle: HAL_GyroHandle,
                                                    voltsPerDegreePerSecond:
                                                        f64,
                                                    status: *mut int32_t);
    pub fn HAL_ResetAnalogGyro(handle: HAL_GyroHandle, status: *mut int32_t);
    pub fn HAL_CalibrateAnalogGyro(handle: HAL_GyroHandle,
                                   status: *mut int32_t);
    pub fn HAL_SetAnalogGyroDeadband(handle: HAL_GyroHandle, volts: f64,
                                     status: *mut int32_t);
    pub fn HAL_GetAnalogGyroAngle(handle: HAL_GyroHandle,
                                  status: *mut int32_t) -> f64;
    pub fn HAL_GetAnalogGyroRate(handle: HAL_GyroHandle, status: *mut int32_t)
     -> f64;
    pub fn HAL_GetAnalogGyroOffset(handle: HAL_GyroHandle,
                                   status: *mut int32_t) -> f64;
    pub fn HAL_GetAnalogGyroCenter(handle: HAL_GyroHandle,
                                   status: *mut int32_t) -> int32_t;
    pub fn HAL_InitializeAnalogInputPort(portHandle: HAL_PortHandle,
                                         status: *mut int32_t)
     -> HAL_AnalogInputHandle;
    pub fn HAL_FreeAnalogInputPort(analogPortHandle: HAL_AnalogInputHandle);
    pub fn HAL_CheckAnalogModule(module: int32_t) -> HAL_Bool;
    pub fn HAL_CheckAnalogInputChannel(channel: int32_t) -> HAL_Bool;
    pub fn HAL_SetAnalogSampleRate(samplesPerSecond: f64,
                                   status: *mut int32_t);
    pub fn HAL_GetAnalogSampleRate(status: *mut int32_t) -> f64;
    pub fn HAL_SetAnalogAverageBits(analogPortHandle: HAL_AnalogInputHandle,
                                    bits: int32_t, status: *mut int32_t);
    pub fn HAL_GetAnalogAverageBits(analogPortHandle: HAL_AnalogInputHandle,
                                    status: *mut int32_t) -> int32_t;
    pub fn HAL_SetAnalogOversampleBits(analogPortHandle:
                                           HAL_AnalogInputHandle,
                                       bits: int32_t, status: *mut int32_t);
    pub fn HAL_GetAnalogOversampleBits(analogPortHandle:
                                           HAL_AnalogInputHandle,
                                       status: *mut int32_t) -> int32_t;
    pub fn HAL_GetAnalogValue(analogPortHandle: HAL_AnalogInputHandle,
                              status: *mut int32_t) -> int32_t;
    pub fn HAL_GetAnalogAverageValue(analogPortHandle: HAL_AnalogInputHandle,
                                     status: *mut int32_t) -> int32_t;
    pub fn HAL_GetAnalogVoltsToValue(analogPortHandle: HAL_AnalogInputHandle,
                                     voltage: f64, status: *mut int32_t)
     -> int32_t;
    pub fn HAL_GetAnalogVoltage(analogPortHandle: HAL_AnalogInputHandle,
                                status: *mut int32_t) -> f64;
    pub fn HAL_GetAnalogAverageVoltage(analogPortHandle:
                                           HAL_AnalogInputHandle,
                                       status: *mut int32_t) -> f64;
    pub fn HAL_GetAnalogLSBWeight(analogPortHandle: HAL_AnalogInputHandle,
                                  status: *mut int32_t) -> int32_t;
    pub fn HAL_GetAnalogOffset(analogPortHandle: HAL_AnalogInputHandle,
                               status: *mut int32_t) -> int32_t;
    pub fn HAL_InitializeAnalogOutputPort(portHandle: HAL_PortHandle,
                                          status: *mut int32_t)
     -> HAL_AnalogOutputHandle;
    pub fn HAL_FreeAnalogOutputPort(analogOutputHandle:
                                        HAL_AnalogOutputHandle);
    pub fn HAL_SetAnalogOutput(analogOutputHandle: HAL_AnalogOutputHandle,
                               voltage: f64, status: *mut int32_t);
    pub fn HAL_GetAnalogOutput(analogOutputHandle: HAL_AnalogOutputHandle,
                               status: *mut int32_t) -> f64;
    pub fn HAL_CheckAnalogOutputChannel(channel: int32_t) -> HAL_Bool;
    pub fn HAL_InitializeAnalogTrigger(portHandle: HAL_AnalogInputHandle,
                                       index: *mut int32_t,
                                       status: *mut int32_t)
     -> HAL_AnalogTriggerHandle;
    pub fn HAL_CleanAnalogTrigger(analogTriggerHandle:
                                      HAL_AnalogTriggerHandle,
                                  status: *mut int32_t);
    pub fn HAL_SetAnalogTriggerLimitsRaw(analogTriggerHandle:
                                             HAL_AnalogTriggerHandle,
                                         lower: int32_t, upper: int32_t,
                                         status: *mut int32_t);
    pub fn HAL_SetAnalogTriggerLimitsVoltage(analogTriggerHandle:
                                                 HAL_AnalogTriggerHandle,
                                             lower: f64, upper: f64,
                                             status: *mut int32_t);
    pub fn HAL_SetAnalogTriggerAveraged(analogTriggerHandle:
                                            HAL_AnalogTriggerHandle,
                                        useAveragedValue: HAL_Bool,
                                        status: *mut int32_t);
    pub fn HAL_SetAnalogTriggerFiltered(analogTriggerHandle:
                                            HAL_AnalogTriggerHandle,
                                        useFilteredValue: HAL_Bool,
                                        status: *mut int32_t);
    pub fn HAL_GetAnalogTriggerInWindow(analogTriggerHandle:
                                            HAL_AnalogTriggerHandle,
                                        status: *mut int32_t) -> HAL_Bool;
    pub fn HAL_GetAnalogTriggerTriggerState(analogTriggerHandle:
                                                HAL_AnalogTriggerHandle,
                                            status: *mut int32_t) -> HAL_Bool;
    pub fn HAL_GetAnalogTriggerOutput(analogTriggerHandle:
                                          HAL_AnalogTriggerHandle,
                                      type_: HAL_AnalogTriggerType,
                                      status: *mut int32_t) -> HAL_Bool;
    pub fn FRC_NetworkCommunication_CANSessionMux_sendMessage(messageID:
                                                                  uint32_t,
                                                              data:
                                                                  *const uint8_t,
                                                              dataSize:
                                                                  uint8_t,
                                                              periodMs:
                                                                  int32_t,
                                                              status:
                                                                  *mut int32_t);
    pub fn FRC_NetworkCommunication_CANSessionMux_receiveMessage(messageID:
                                                                     *mut uint32_t,
                                                                 messageIDMask:
                                                                     uint32_t,
                                                                 data:
                                                                     *mut uint8_t,
                                                                 dataSize:
                                                                     *mut uint8_t,
                                                                 timeStamp:
                                                                     *mut uint32_t,
                                                                 status:
                                                                     *mut int32_t);
    pub fn FRC_NetworkCommunication_CANSessionMux_openStreamSession(sessionHandle:
                                                                        *mut uint32_t,
                                                                    messageID:
                                                                        uint32_t,
                                                                    messageIDMask:
                                                                        uint32_t,
                                                                    maxMessages:
                                                                        uint32_t,
                                                                    status:
                                                                        *mut int32_t);
    pub fn FRC_NetworkCommunication_CANSessionMux_closeStreamSession(sessionHandle:
                                                                         uint32_t);
    pub fn FRC_NetworkCommunication_CANSessionMux_readStreamSession(sessionHandle:
                                                                        uint32_t,
                                                                    messages:
                                                                        *mut tCANStreamMessage,
                                                                    messagesToRead:
                                                                        uint32_t,
                                                                    messagesRead:
                                                                        *mut uint32_t,
                                                                    status:
                                                                        *mut int32_t);
    pub fn FRC_NetworkCommunication_CANSessionMux_getCANStatus(percentBusUtilization:
                                                                   *mut f32,
                                                               busOffCount:
                                                                   *mut uint32_t,
                                                               txFullCount:
                                                                   *mut uint32_t,
                                                               receiveErrorCount:
                                                                   *mut uint32_t,
                                                               transmitErrorCount:
                                                                   *mut uint32_t,
                                                               status:
                                                                   *mut int32_t);
    pub fn canTxSend(arbID: uint32_t, length: uint8_t, period: int32_t);
    pub fn canTxPackInt8(arbID: uint32_t, offset: uint8_t, value: uint8_t);
    pub fn canTxPackInt16(arbID: uint32_t, offset: uint8_t, value: uint16_t);
    pub fn canTxPackInt32(arbID: uint32_t, offset: uint8_t, value: uint32_t);
    pub fn canTxPackFXP16(arbID: uint32_t, offset: uint8_t, value: f64);
    pub fn canTxPackFXP32(arbID: uint32_t, offset: uint8_t, value: f64);
    pub fn canTxUnpackInt8(arbID: uint32_t, offset: uint8_t) -> uint8_t;
    pub fn canTxUnpackInt32(arbID: uint32_t, offset: uint8_t) -> uint32_t;
    pub fn canTxUnpackInt16(arbID: uint32_t, offset: uint8_t) -> uint16_t;
    pub fn canTxUnpackFXP16(arbID: uint32_t, offset: uint8_t) -> f64;
    pub fn canTxUnpackFXP32(arbID: uint32_t, offset: uint8_t) -> f64;
    pub fn canRxReceive(arbID: uint32_t) -> HAL_Bool;
    pub fn canRxUnpackInt8(arbID: uint32_t, offset: uint8_t) -> uint8_t;
    pub fn canRxUnpackInt16(arbID: uint32_t, offset: uint8_t) -> uint16_t;
    pub fn canRxUnpackInt32(arbID: uint32_t, offset: uint8_t) -> uint32_t;
    pub fn canRxUnpackFXP16(arbID: uint32_t, offset: uint8_t) -> f64;
    pub fn canRxUnpackFXP32(arbID: uint32_t, offset: uint8_t) -> f64;
    pub fn NiFpga_Initialize() -> NiFpga_Status;
    pub fn NiFpga_Finalize() -> NiFpga_Status;
    pub fn NiFpga_Open(bitfile: *const ::std::os::raw::c_char,
                       signature: *const ::std::os::raw::c_char,
                       resource: *const ::std::os::raw::c_char,
                       attribute: uint32_t, session: *mut NiFpga_Session)
     -> NiFpga_Status;
    pub fn NiFpga_Close(session: NiFpga_Session, attribute: uint32_t)
     -> NiFpga_Status;
    pub fn NiFpga_Run(session: NiFpga_Session, attribute: uint32_t)
     -> NiFpga_Status;
    pub fn NiFpga_Abort(session: NiFpga_Session) -> NiFpga_Status;
    pub fn NiFpga_Reset(session: NiFpga_Session) -> NiFpga_Status;
    pub fn NiFpga_Download(session: NiFpga_Session) -> NiFpga_Status;
    pub fn NiFpga_ReadBool(session: NiFpga_Session, indicator: uint32_t,
                           value: *mut NiFpga_Bool) -> NiFpga_Status;
    pub fn NiFpga_ReadI8(session: NiFpga_Session, indicator: uint32_t,
                         value: *mut int8_t) -> NiFpga_Status;
    pub fn NiFpga_ReadU8(session: NiFpga_Session, indicator: uint32_t,
                         value: *mut uint8_t) -> NiFpga_Status;
    pub fn NiFpga_ReadI16(session: NiFpga_Session, indicator: uint32_t,
                          value: *mut int16_t) -> NiFpga_Status;
    pub fn NiFpga_ReadU16(session: NiFpga_Session, indicator: uint32_t,
                          value: *mut uint16_t) -> NiFpga_Status;
    pub fn NiFpga_ReadI32(session: NiFpga_Session, indicator: uint32_t,
                          value: *mut int32_t) -> NiFpga_Status;
    pub fn NiFpga_ReadU32(session: NiFpga_Session, indicator: uint32_t,
                          value: *mut uint32_t) -> NiFpga_Status;
    pub fn NiFpga_ReadI64(session: NiFpga_Session, indicator: uint32_t,
                          value: *mut int64_t) -> NiFpga_Status;
    pub fn NiFpga_ReadU64(session: NiFpga_Session, indicator: uint32_t,
                          value: *mut uint64_t) -> NiFpga_Status;
    pub fn NiFpga_ReadSgl(session: NiFpga_Session, indicator: uint32_t,
                          value: *mut f32) -> NiFpga_Status;
    pub fn NiFpga_ReadDbl(session: NiFpga_Session, indicator: uint32_t,
                          value: *mut f64) -> NiFpga_Status;
    pub fn NiFpga_WriteBool(session: NiFpga_Session, control: uint32_t,
                            value: NiFpga_Bool) -> NiFpga_Status;
    pub fn NiFpga_WriteI8(session: NiFpga_Session, control: uint32_t,
                          value: int8_t) -> NiFpga_Status;
    pub fn NiFpga_WriteU8(session: NiFpga_Session, control: uint32_t,
                          value: uint8_t) -> NiFpga_Status;
    pub fn NiFpga_WriteI16(session: NiFpga_Session, control: uint32_t,
                           value: int16_t) -> NiFpga_Status;
    pub fn NiFpga_WriteU16(session: NiFpga_Session, control: uint32_t,
                           value: uint16_t) -> NiFpga_Status;
    pub fn NiFpga_WriteI32(session: NiFpga_Session, control: uint32_t,
                           value: int32_t) -> NiFpga_Status;
    pub fn NiFpga_WriteU32(session: NiFpga_Session, control: uint32_t,
                           value: uint32_t) -> NiFpga_Status;
    pub fn NiFpga_WriteI64(session: NiFpga_Session, control: uint32_t,
                           value: int64_t) -> NiFpga_Status;
    pub fn NiFpga_WriteU64(session: NiFpga_Session, control: uint32_t,
                           value: uint64_t) -> NiFpga_Status;
    pub fn NiFpga_WriteSgl(session: NiFpga_Session, control: uint32_t,
                           value: f32) -> NiFpga_Status;
    pub fn NiFpga_WriteDbl(session: NiFpga_Session, control: uint32_t,
                           value: f64) -> NiFpga_Status;
    pub fn NiFpga_ReadArrayBool(session: NiFpga_Session, indicator: uint32_t,
                                array: *mut NiFpga_Bool, size: size_t)
     -> NiFpga_Status;
    pub fn NiFpga_ReadArrayI8(session: NiFpga_Session, indicator: uint32_t,
                              array: *mut int8_t, size: size_t)
     -> NiFpga_Status;
    pub fn NiFpga_ReadArrayU8(session: NiFpga_Session, indicator: uint32_t,
                              array: *mut uint8_t, size: size_t)
     -> NiFpga_Status;
    pub fn NiFpga_ReadArrayI16(session: NiFpga_Session, indicator: uint32_t,
                               array: *mut int16_t, size: size_t)
     -> NiFpga_Status;
    pub fn NiFpga_ReadArrayU16(session: NiFpga_Session, indicator: uint32_t,
                               array: *mut uint16_t, size: size_t)
     -> NiFpga_Status;
    pub fn NiFpga_ReadArrayI32(session: NiFpga_Session, indicator: uint32_t,
                               array: *mut int32_t, size: size_t)
     -> NiFpga_Status;
    pub fn NiFpga_ReadArrayU32(session: NiFpga_Session, indicator: uint32_t,
                               array: *mut uint32_t, size: size_t)
     -> NiFpga_Status;
    pub fn NiFpga_ReadArrayI64(session: NiFpga_Session, indicator: uint32_t,
                               array: *mut int64_t, size: size_t)
     -> NiFpga_Status;
    pub fn NiFpga_ReadArrayU64(session: NiFpga_Session, indicator: uint32_t,
                               array: *mut uint64_t, size: size_t)
     -> NiFpga_Status;
    pub fn NiFpga_ReadArraySgl(session: NiFpga_Session, indicator: uint32_t,
                               array: *mut f32, size: size_t)
     -> NiFpga_Status;
    pub fn NiFpga_ReadArrayDbl(session: NiFpga_Session, indicator: uint32_t,
                               array: *mut f64, size: size_t)
     -> NiFpga_Status;
    pub fn NiFpga_WriteArrayBool(session: NiFpga_Session, control: uint32_t,
                                 array: *const NiFpga_Bool, size: size_t)
     -> NiFpga_Status;
    pub fn NiFpga_WriteArrayI8(session: NiFpga_Session, control: uint32_t,
                               array: *const int8_t, size: size_t)
     -> NiFpga_Status;
    pub fn NiFpga_WriteArrayU8(session: NiFpga_Session, control: uint32_t,
                               array: *const uint8_t, size: size_t)
     -> NiFpga_Status;
    pub fn NiFpga_WriteArrayI16(session: NiFpga_Session, control: uint32_t,
                                array: *const int16_t, size: size_t)
     -> NiFpga_Status;
    pub fn NiFpga_WriteArrayU16(session: NiFpga_Session, control: uint32_t,
                                array: *const uint16_t, size: size_t)
     -> NiFpga_Status;
    pub fn NiFpga_WriteArrayI32(session: NiFpga_Session, control: uint32_t,
                                array: *const int32_t, size: size_t)
     -> NiFpga_Status;
    pub fn NiFpga_WriteArrayU32(session: NiFpga_Session, control: uint32_t,
                                array: *const uint32_t, size: size_t)
     -> NiFpga_Status;
    pub fn NiFpga_WriteArrayI64(session: NiFpga_Session, control: uint32_t,
                                array: *const int64_t, size: size_t)
     -> NiFpga_Status;
    pub fn NiFpga_WriteArrayU64(session: NiFpga_Session, control: uint32_t,
                                array: *const uint64_t, size: size_t)
     -> NiFpga_Status;
    pub fn NiFpga_WriteArraySgl(session: NiFpga_Session, control: uint32_t,
                                array: *const f32, size: size_t)
     -> NiFpga_Status;
    pub fn NiFpga_WriteArrayDbl(session: NiFpga_Session, control: uint32_t,
                                array: *const f64, size: size_t)
     -> NiFpga_Status;
    pub fn NiFpga_ReserveIrqContext(session: NiFpga_Session,
                                    context: *mut NiFpga_IrqContext)
     -> NiFpga_Status;
    pub fn NiFpga_UnreserveIrqContext(session: NiFpga_Session,
                                      context: NiFpga_IrqContext)
     -> NiFpga_Status;
    pub fn NiFpga_WaitOnIrqs(session: NiFpga_Session,
                             context: NiFpga_IrqContext, irqs: uint32_t,
                             timeout: uint32_t, irqsAsserted: *mut uint32_t,
                             timedOut: *mut NiFpga_Bool) -> NiFpga_Status;
    pub fn NiFpga_AcknowledgeIrqs(session: NiFpga_Session, irqs: uint32_t)
     -> NiFpga_Status;
    pub fn NiFpga_ConfigureFifo(session: NiFpga_Session, fifo: uint32_t,
                                depth: size_t) -> NiFpga_Status;
    pub fn NiFpga_ConfigureFifo2(session: NiFpga_Session, fifo: uint32_t,
                                 requestedDepth: size_t,
                                 actualDepth: *mut size_t) -> NiFpga_Status;
    pub fn NiFpga_StartFifo(session: NiFpga_Session, fifo: uint32_t)
     -> NiFpga_Status;
    pub fn NiFpga_StopFifo(session: NiFpga_Session, fifo: uint32_t)
     -> NiFpga_Status;
    pub fn NiFpga_ReadFifoBool(session: NiFpga_Session, fifo: uint32_t,
                               data: *mut NiFpga_Bool,
                               numberOfElements: size_t, timeout: uint32_t,
                               elementsRemaining: *mut size_t)
     -> NiFpga_Status;
    pub fn NiFpga_ReadFifoI8(session: NiFpga_Session, fifo: uint32_t,
                             data: *mut int8_t, numberOfElements: size_t,
                             timeout: uint32_t,
                             elementsRemaining: *mut size_t) -> NiFpga_Status;
    pub fn NiFpga_ReadFifoU8(session: NiFpga_Session, fifo: uint32_t,
                             data: *mut uint8_t, numberOfElements: size_t,
                             timeout: uint32_t,
                             elementsRemaining: *mut size_t) -> NiFpga_Status;
    pub fn NiFpga_ReadFifoI16(session: NiFpga_Session, fifo: uint32_t,
                              data: *mut int16_t, numberOfElements: size_t,
                              timeout: uint32_t,
                              elementsRemaining: *mut size_t)
     -> NiFpga_Status;
    pub fn NiFpga_ReadFifoU16(session: NiFpga_Session, fifo: uint32_t,
                              data: *mut uint16_t, numberOfElements: size_t,
                              timeout: uint32_t,
                              elementsRemaining: *mut size_t)
     -> NiFpga_Status;
    pub fn NiFpga_ReadFifoI32(session: NiFpga_Session, fifo: uint32_t,
                              data: *mut int32_t, numberOfElements: size_t,
                              timeout: uint32_t,
                              elementsRemaining: *mut size_t)
     -> NiFpga_Status;
    pub fn NiFpga_ReadFifoU32(session: NiFpga_Session, fifo: uint32_t,
                              data: *mut uint32_t, numberOfElements: size_t,
                              timeout: uint32_t,
                              elementsRemaining: *mut size_t)
     -> NiFpga_Status;
    pub fn NiFpga_ReadFifoI64(session: NiFpga_Session, fifo: uint32_t,
                              data: *mut int64_t, numberOfElements: size_t,
                              timeout: uint32_t,
                              elementsRemaining: *mut size_t)
     -> NiFpga_Status;
    pub fn NiFpga_ReadFifoU64(session: NiFpga_Session, fifo: uint32_t,
                              data: *mut uint64_t, numberOfElements: size_t,
                              timeout: uint32_t,
                              elementsRemaining: *mut size_t)
     -> NiFpga_Status;
    pub fn NiFpga_ReadFifoSgl(session: NiFpga_Session, fifo: uint32_t,
                              data: *mut f32, numberOfElements: size_t,
                              timeout: uint32_t,
                              elementsRemaining: *mut size_t)
     -> NiFpga_Status;
    pub fn NiFpga_ReadFifoDbl(session: NiFpga_Session, fifo: uint32_t,
                              data: *mut f64, numberOfElements: size_t,
                              timeout: uint32_t,
                              elementsRemaining: *mut size_t)
     -> NiFpga_Status;
    pub fn NiFpga_WriteFifoBool(session: NiFpga_Session, fifo: uint32_t,
                                data: *const NiFpga_Bool,
                                numberOfElements: size_t, timeout: uint32_t,
                                emptyElementsRemaining: *mut size_t)
     -> NiFpga_Status;
    pub fn NiFpga_WriteFifoI8(session: NiFpga_Session, fifo: uint32_t,
                              data: *const int8_t, numberOfElements: size_t,
                              timeout: uint32_t,
                              emptyElementsRemaining: *mut size_t)
     -> NiFpga_Status;
    pub fn NiFpga_WriteFifoU8(session: NiFpga_Session, fifo: uint32_t,
                              data: *const uint8_t, numberOfElements: size_t,
                              timeout: uint32_t,
                              emptyElementsRemaining: *mut size_t)
     -> NiFpga_Status;
    pub fn NiFpga_WriteFifoI16(session: NiFpga_Session, fifo: uint32_t,
                               data: *const int16_t, numberOfElements: size_t,
                               timeout: uint32_t,
                               emptyElementsRemaining: *mut size_t)
     -> NiFpga_Status;
    pub fn NiFpga_WriteFifoU16(session: NiFpga_Session, fifo: uint32_t,
                               data: *const uint16_t,
                               numberOfElements: size_t, timeout: uint32_t,
                               emptyElementsRemaining: *mut size_t)
     -> NiFpga_Status;
    pub fn NiFpga_WriteFifoI32(session: NiFpga_Session, fifo: uint32_t,
                               data: *const int32_t, numberOfElements: size_t,
                               timeout: uint32_t,
                               emptyElementsRemaining: *mut size_t)
     -> NiFpga_Status;
    pub fn NiFpga_WriteFifoU32(session: NiFpga_Session, fifo: uint32_t,
                               data: *const uint32_t,
                               numberOfElements: size_t, timeout: uint32_t,
                               emptyElementsRemaining: *mut size_t)
     -> NiFpga_Status;
    pub fn NiFpga_WriteFifoI64(session: NiFpga_Session, fifo: uint32_t,
                               data: *const int64_t, numberOfElements: size_t,
                               timeout: uint32_t,
                               emptyElementsRemaining: *mut size_t)
     -> NiFpga_Status;
    pub fn NiFpga_WriteFifoU64(session: NiFpga_Session, fifo: uint32_t,
                               data: *const uint64_t,
                               numberOfElements: size_t, timeout: uint32_t,
                               emptyElementsRemaining: *mut size_t)
     -> NiFpga_Status;
    pub fn NiFpga_WriteFifoSgl(session: NiFpga_Session, fifo: uint32_t,
                               data: *const f32, numberOfElements: size_t,
                               timeout: uint32_t,
                               emptyElementsRemaining: *mut size_t)
     -> NiFpga_Status;
    pub fn NiFpga_WriteFifoDbl(session: NiFpga_Session, fifo: uint32_t,
                               data: *const f64, numberOfElements: size_t,
                               timeout: uint32_t,
                               emptyElementsRemaining: *mut size_t)
     -> NiFpga_Status;
    pub fn NiFpga_AcquireFifoReadElementsBool(session: NiFpga_Session,
                                              fifo: uint32_t,
                                              elements: *mut *mut NiFpga_Bool,
                                              elementsRequested: size_t,
                                              timeout: uint32_t,
                                              elementsAcquired: *mut size_t,
                                              elementsRemaining: *mut size_t)
     -> NiFpga_Status;
    pub fn NiFpga_AcquireFifoReadElementsI8(session: NiFpga_Session,
                                            fifo: uint32_t,
                                            elements: *mut *mut int8_t,
                                            elementsRequested: size_t,
                                            timeout: uint32_t,
                                            elementsAcquired: *mut size_t,
                                            elementsRemaining: *mut size_t)
     -> NiFpga_Status;
    pub fn NiFpga_AcquireFifoReadElementsU8(session: NiFpga_Session,
                                            fifo: uint32_t,
                                            elements: *mut *mut uint8_t,
                                            elementsRequested: size_t,
                                            timeout: uint32_t,
                                            elementsAcquired: *mut size_t,
                                            elementsRemaining: *mut size_t)
     -> NiFpga_Status;
    pub fn NiFpga_AcquireFifoReadElementsI16(session: NiFpga_Session,
                                             fifo: uint32_t,
                                             elements: *mut *mut int16_t,
                                             elementsRequested: size_t,
                                             timeout: uint32_t,
                                             elementsAcquired: *mut size_t,
                                             elementsRemaining: *mut size_t)
     -> NiFpga_Status;
    pub fn NiFpga_AcquireFifoReadElementsU16(session: NiFpga_Session,
                                             fifo: uint32_t,
                                             elements: *mut *mut uint16_t,
                                             elementsRequested: size_t,
                                             timeout: uint32_t,
                                             elementsAcquired: *mut size_t,
                                             elementsRemaining: *mut size_t)
     -> NiFpga_Status;
    pub fn NiFpga_AcquireFifoReadElementsI32(session: NiFpga_Session,
                                             fifo: uint32_t,
                                             elements: *mut *mut int32_t,
                                             elementsRequested: size_t,
                                             timeout: uint32_t,
                                             elementsAcquired: *mut size_t,
                                             elementsRemaining: *mut size_t)
     -> NiFpga_Status;
    pub fn NiFpga_AcquireFifoReadElementsU32(session: NiFpga_Session,
                                             fifo: uint32_t,
                                             elements: *mut *mut uint32_t,
                                             elementsRequested: size_t,
                                             timeout: uint32_t,
                                             elementsAcquired: *mut size_t,
                                             elementsRemaining: *mut size_t)
     -> NiFpga_Status;
    pub fn NiFpga_AcquireFifoReadElementsI64(session: NiFpga_Session,
                                             fifo: uint32_t,
                                             elements: *mut *mut int64_t,
                                             elementsRequested: size_t,
                                             timeout: uint32_t,
                                             elementsAcquired: *mut size_t,
                                             elementsRemaining: *mut size_t)
     -> NiFpga_Status;
    pub fn NiFpga_AcquireFifoReadElementsU64(session: NiFpga_Session,
                                             fifo: uint32_t,
                                             elements: *mut *mut uint64_t,
                                             elementsRequested: size_t,
                                             timeout: uint32_t,
                                             elementsAcquired: *mut size_t,
                                             elementsRemaining: *mut size_t)
     -> NiFpga_Status;
    pub fn NiFpga_AcquireFifoReadElementsSgl(session: NiFpga_Session,
                                             fifo: uint32_t,
                                             elements: *mut *mut f32,
                                             elementsRequested: size_t,
                                             timeout: uint32_t,
                                             elementsAcquired: *mut size_t,
                                             elementsRemaining: *mut size_t)
     -> NiFpga_Status;
    pub fn NiFpga_AcquireFifoReadElementsDbl(session: NiFpga_Session,
                                             fifo: uint32_t,
                                             elements: *mut *mut f64,
                                             elementsRequested: size_t,
                                             timeout: uint32_t,
                                             elementsAcquired: *mut size_t,
                                             elementsRemaining: *mut size_t)
     -> NiFpga_Status;
    pub fn NiFpga_AcquireFifoWriteElementsBool(session: NiFpga_Session,
                                               fifo: uint32_t,
                                               elements:
                                                   *mut *mut NiFpga_Bool,
                                               elementsRequested: size_t,
                                               timeout: uint32_t,
                                               elementsAcquired: *mut size_t,
                                               elementsRemaining: *mut size_t)
     -> NiFpga_Status;
    pub fn NiFpga_AcquireFifoWriteElementsI8(session: NiFpga_Session,
                                             fifo: uint32_t,
                                             elements: *mut *mut int8_t,
                                             elementsRequested: size_t,
                                             timeout: uint32_t,
                                             elementsAcquired: *mut size_t,
                                             elementsRemaining: *mut size_t)
     -> NiFpga_Status;
    pub fn NiFpga_AcquireFifoWriteElementsU8(session: NiFpga_Session,
                                             fifo: uint32_t,
                                             elements: *mut *mut uint8_t,
                                             elementsRequested: size_t,
                                             timeout: uint32_t,
                                             elementsAcquired: *mut size_t,
                                             elementsRemaining: *mut size_t)
     -> NiFpga_Status;
    pub fn NiFpga_AcquireFifoWriteElementsI16(session: NiFpga_Session,
                                              fifo: uint32_t,
                                              elements: *mut *mut int16_t,
                                              elementsRequested: size_t,
                                              timeout: uint32_t,
                                              elementsAcquired: *mut size_t,
                                              elementsRemaining: *mut size_t)
     -> NiFpga_Status;
    pub fn NiFpga_AcquireFifoWriteElementsU16(session: NiFpga_Session,
                                              fifo: uint32_t,
                                              elements: *mut *mut uint16_t,
                                              elementsRequested: size_t,
                                              timeout: uint32_t,
                                              elementsAcquired: *mut size_t,
                                              elementsRemaining: *mut size_t)
     -> NiFpga_Status;
    pub fn NiFpga_AcquireFifoWriteElementsI32(session: NiFpga_Session,
                                              fifo: uint32_t,
                                              elements: *mut *mut int32_t,
                                              elementsRequested: size_t,
                                              timeout: uint32_t,
                                              elementsAcquired: *mut size_t,
                                              elementsRemaining: *mut size_t)
     -> NiFpga_Status;
    pub fn NiFpga_AcquireFifoWriteElementsU32(session: NiFpga_Session,
                                              fifo: uint32_t,
                                              elements: *mut *mut uint32_t,
                                              elementsRequested: size_t,
                                              timeout: uint32_t,
                                              elementsAcquired: *mut size_t,
                                              elementsRemaining: *mut size_t)
     -> NiFpga_Status;
    pub fn NiFpga_AcquireFifoWriteElementsI64(session: NiFpga_Session,
                                              fifo: uint32_t,
                                              elements: *mut *mut int64_t,
                                              elementsRequested: size_t,
                                              timeout: uint32_t,
                                              elementsAcquired: *mut size_t,
                                              elementsRemaining: *mut size_t)
     -> NiFpga_Status;
    pub fn NiFpga_AcquireFifoWriteElementsU64(session: NiFpga_Session,
                                              fifo: uint32_t,
                                              elements: *mut *mut uint64_t,
                                              elementsRequested: size_t,
                                              timeout: uint32_t,
                                              elementsAcquired: *mut size_t,
                                              elementsRemaining: *mut size_t)
     -> NiFpga_Status;
    pub fn NiFpga_AcquireFifoWriteElementsSgl(session: NiFpga_Session,
                                              fifo: uint32_t,
                                              elements: *mut *mut f32,
                                              elementsRequested: size_t,
                                              timeout: uint32_t,
                                              elementsAcquired: *mut size_t,
                                              elementsRemaining: *mut size_t)
     -> NiFpga_Status;
    pub fn NiFpga_AcquireFifoWriteElementsDbl(session: NiFpga_Session,
                                              fifo: uint32_t,
                                              elements: *mut *mut f64,
                                              elementsRequested: size_t,
                                              timeout: uint32_t,
                                              elementsAcquired: *mut size_t,
                                              elementsRemaining: *mut size_t)
     -> NiFpga_Status;
    pub fn NiFpga_ReleaseFifoElements(session: NiFpga_Session, fifo: uint32_t,
                                      elements: size_t) -> NiFpga_Status;
    pub fn NiFpga_GetPeerToPeerFifoEndpoint(session: NiFpga_Session,
                                            fifo: uint32_t,
                                            endpoint: *mut uint32_t)
     -> NiFpga_Status;
    pub fn HAL_GetSystemClockTicksPerMicrosecond() -> int32_t;
    pub fn HAL_InitializeCounter(mode: HAL_Counter_Mode, index: *mut int32_t,
                                 status: *mut int32_t) -> HAL_CounterHandle;
    pub fn HAL_FreeCounter(counterHandle: HAL_CounterHandle,
                           status: *mut int32_t);
    pub fn HAL_SetCounterAverageSize(counterHandle: HAL_CounterHandle,
                                     size: int32_t, status: *mut int32_t);
    pub fn HAL_SetCounterUpSource(counterHandle: HAL_CounterHandle,
                                  digitalSourceHandle: HAL_Handle,
                                  analogTriggerType: HAL_AnalogTriggerType,
                                  status: *mut int32_t);
    pub fn HAL_SetCounterUpSourceEdge(counterHandle: HAL_CounterHandle,
                                      risingEdge: HAL_Bool,
                                      fallingEdge: HAL_Bool,
                                      status: *mut int32_t);
    pub fn HAL_ClearCounterUpSource(counterHandle: HAL_CounterHandle,
                                    status: *mut int32_t);
    pub fn HAL_SetCounterDownSource(counterHandle: HAL_CounterHandle,
                                    digitalSourceHandle: HAL_Handle,
                                    analogTriggerType: HAL_AnalogTriggerType,
                                    status: *mut int32_t);
    pub fn HAL_SetCounterDownSourceEdge(counterHandle: HAL_CounterHandle,
                                        risingEdge: HAL_Bool,
                                        fallingEdge: HAL_Bool,
                                        status: *mut int32_t);
    pub fn HAL_ClearCounterDownSource(counterHandle: HAL_CounterHandle,
                                      status: *mut int32_t);
    pub fn HAL_SetCounterUpDownMode(counterHandle: HAL_CounterHandle,
                                    status: *mut int32_t);
    pub fn HAL_SetCounterExternalDirectionMode(counterHandle:
                                                   HAL_CounterHandle,
                                               status: *mut int32_t);
    pub fn HAL_SetCounterSemiPeriodMode(counterHandle: HAL_CounterHandle,
                                        highSemiPeriod: HAL_Bool,
                                        status: *mut int32_t);
    pub fn HAL_SetCounterPulseLengthMode(counterHandle: HAL_CounterHandle,
                                         threshold: f64,
                                         status: *mut int32_t);
    pub fn HAL_GetCounterSamplesToAverage(counterHandle: HAL_CounterHandle,
                                          status: *mut int32_t) -> int32_t;
    pub fn HAL_SetCounterSamplesToAverage(counterHandle: HAL_CounterHandle,
                                          samplesToAverage: int32_t,
                                          status: *mut int32_t);
    pub fn HAL_ResetCounter(counterHandle: HAL_CounterHandle,
                            status: *mut int32_t);
    pub fn HAL_GetCounter(counterHandle: HAL_CounterHandle,
                          status: *mut int32_t) -> int32_t;
    pub fn HAL_GetCounterPeriod(counterHandle: HAL_CounterHandle,
                                status: *mut int32_t) -> f64;
    pub fn HAL_SetCounterMaxPeriod(counterHandle: HAL_CounterHandle,
                                   maxPeriod: f64, status: *mut int32_t);
    pub fn HAL_SetCounterUpdateWhenEmpty(counterHandle: HAL_CounterHandle,
                                         enabled: HAL_Bool,
                                         status: *mut int32_t);
    pub fn HAL_GetCounterStopped(counterHandle: HAL_CounterHandle,
                                 status: *mut int32_t) -> HAL_Bool;
    pub fn HAL_GetCounterDirection(counterHandle: HAL_CounterHandle,
                                   status: *mut int32_t) -> HAL_Bool;
    pub fn HAL_SetCounterReverseDirection(counterHandle: HAL_CounterHandle,
                                          reverseDirection: HAL_Bool,
                                          status: *mut int32_t);
    pub fn HAL_InitializeCompressor(module: int32_t, status: *mut int32_t)
     -> HAL_CompressorHandle;
    pub fn HAL_CheckCompressorModule(module: int32_t) -> HAL_Bool;
    pub fn HAL_GetCompressor(compressorHandle: HAL_CompressorHandle,
                             status: *mut int32_t) -> HAL_Bool;
    pub fn HAL_SetCompressorClosedLoopControl(compressorHandle:
                                                  HAL_CompressorHandle,
                                              value: HAL_Bool,
                                              status: *mut int32_t);
    pub fn HAL_GetCompressorClosedLoopControl(compressorHandle:
                                                  HAL_CompressorHandle,
                                              status: *mut int32_t)
     -> HAL_Bool;
    pub fn HAL_GetCompressorPressureSwitch(compressorHandle:
                                               HAL_CompressorHandle,
                                           status: *mut int32_t) -> HAL_Bool;
    pub fn HAL_GetCompressorCurrent(compressorHandle: HAL_CompressorHandle,
                                    status: *mut int32_t) -> f64;
    pub fn HAL_GetCompressorCurrentTooHighFault(compressorHandle:
                                                    HAL_CompressorHandle,
                                                status: *mut int32_t)
     -> HAL_Bool;
    pub fn HAL_GetCompressorCurrentTooHighStickyFault(compressorHandle:
                                                          HAL_CompressorHandle,
                                                      status: *mut int32_t)
     -> HAL_Bool;
    pub fn HAL_GetCompressorShortedStickyFault(compressorHandle:
                                                   HAL_CompressorHandle,
                                               status: *mut int32_t)
     -> HAL_Bool;
    pub fn HAL_GetCompressorShortedFault(compressorHandle:
                                             HAL_CompressorHandle,
                                         status: *mut int32_t) -> HAL_Bool;
    pub fn HAL_GetCompressorNotConnectedStickyFault(compressorHandle:
                                                        HAL_CompressorHandle,
                                                    status: *mut int32_t)
     -> HAL_Bool;
    pub fn HAL_GetCompressorNotConnectedFault(compressorHandle:
                                                  HAL_CompressorHandle,
                                              status: *mut int32_t)
     -> HAL_Bool;
    pub fn HAL_InitializeDIOPort(portHandle: HAL_PortHandle, input: HAL_Bool,
                                 status: *mut int32_t) -> HAL_DigitalHandle;
    pub fn HAL_CheckDIOChannel(channel: int32_t) -> HAL_Bool;
    pub fn HAL_FreeDIOPort(dioPortHandle: HAL_DigitalHandle);
    pub fn HAL_AllocateDigitalPWM(status: *mut int32_t)
     -> HAL_DigitalPWMHandle;
    pub fn HAL_FreeDigitalPWM(pwmGenerator: HAL_DigitalPWMHandle,
                              status: *mut int32_t);
    pub fn HAL_SetDigitalPWMRate(rate: f64, status: *mut int32_t);
    pub fn HAL_SetDigitalPWMDutyCycle(pwmGenerator: HAL_DigitalPWMHandle,
                                      dutyCycle: f64, status: *mut int32_t);
    pub fn HAL_SetDigitalPWMOutputChannel(pwmGenerator: HAL_DigitalPWMHandle,
                                          channel: int32_t,
                                          status: *mut int32_t);
    pub fn HAL_SetDIO(dioPortHandle: HAL_DigitalHandle, value: HAL_Bool,
                      status: *mut int32_t);
    pub fn HAL_GetDIO(dioPortHandle: HAL_DigitalHandle, status: *mut int32_t)
     -> HAL_Bool;
    pub fn HAL_GetDIODirection(dioPortHandle: HAL_DigitalHandle,
                               status: *mut int32_t) -> HAL_Bool;
    pub fn HAL_Pulse(dioPortHandle: HAL_DigitalHandle, pulseLength: f64,
                     status: *mut int32_t);
    pub fn HAL_IsPulsing(dioPortHandle: HAL_DigitalHandle,
                         status: *mut int32_t) -> HAL_Bool;
    pub fn HAL_IsAnyPulsing(status: *mut int32_t) -> HAL_Bool;
    pub fn HAL_SetFilterSelect(dioPortHandle: HAL_DigitalHandle,
                               filterIndex: int32_t, status: *mut int32_t);
    pub fn HAL_GetFilterSelect(dioPortHandle: HAL_DigitalHandle,
                               status: *mut int32_t) -> int32_t;
    pub fn HAL_SetFilterPeriod(filterIndex: int32_t, value: int64_t,
                               status: *mut int32_t);
    pub fn HAL_GetFilterPeriod(filterIndex: int32_t, status: *mut int32_t)
     -> int64_t;
    pub fn HAL_SetErrorData(errors: *const ::std::os::raw::c_char,
                            errorsLength: int32_t, waitMs: int32_t)
     -> int32_t;
    pub fn HAL_SendError(isError: HAL_Bool, errorCode: int32_t,
                         isLVCode: HAL_Bool,
                         details: *const ::std::os::raw::c_char,
                         location: *const ::std::os::raw::c_char,
                         callStack: *const ::std::os::raw::c_char,
                         printMsg: HAL_Bool) -> int32_t;
    pub fn HAL_GetControlWord(controlWord: *mut HAL_ControlWord) -> int32_t;
    pub fn HAL_GetAllianceStation(status: *mut int32_t)
     -> HAL_AllianceStationID;
    pub fn HAL_GetJoystickAxes(joystickNum: int32_t,
                               axes: *mut HAL_JoystickAxes) -> int32_t;
    pub fn HAL_GetJoystickPOVs(joystickNum: int32_t,
                               povs: *mut HAL_JoystickPOVs) -> int32_t;
    pub fn HAL_GetJoystickButtons(joystickNum: int32_t,
                                  buttons: *mut HAL_JoystickButtons)
     -> int32_t;
    pub fn HAL_GetJoystickDescriptor(joystickNum: int32_t,
                                     desc: *mut HAL_JoystickDescriptor)
     -> int32_t;
    pub fn HAL_GetJoystickIsXbox(joystickNum: int32_t) -> HAL_Bool;
    pub fn HAL_GetJoystickType(joystickNum: int32_t) -> int32_t;
    pub fn HAL_GetJoystickName(joystickNum: int32_t)
     -> *mut ::std::os::raw::c_char;
    pub fn HAL_GetJoystickAxisType(joystickNum: int32_t, axis: int32_t)
     -> int32_t;
    pub fn HAL_SetJoystickOutputs(joystickNum: int32_t, outputs: int64_t,
                                  leftRumble: int32_t, rightRumble: int32_t)
     -> int32_t;
    pub fn HAL_GetMatchTime(status: *mut int32_t) -> f64;
    pub fn HAL_WaitForDSData();
    pub fn HAL_InitializeDriverStation();
    pub fn HAL_ObserveUserProgramStarting();
    pub fn HAL_ObserveUserProgramDisabled();
    pub fn HAL_ObserveUserProgramAutonomous();
    pub fn HAL_ObserveUserProgramTeleop();
    pub fn HAL_ObserveUserProgramTest();
    pub fn HAL_InitializeEncoder(digitalSourceHandleA: HAL_Handle,
                                 analogTriggerTypeA: HAL_AnalogTriggerType,
                                 digitalSourceHandleB: HAL_Handle,
                                 analogTriggerTypeB: HAL_AnalogTriggerType,
                                 reverseDirection: HAL_Bool,
                                 encodingType: HAL_EncoderEncodingType,
                                 status: *mut int32_t) -> HAL_EncoderHandle;
    pub fn HAL_FreeEncoder(encoderHandle: HAL_EncoderHandle,
                           status: *mut int32_t);
    pub fn HAL_GetEncoder(encoderHandle: HAL_EncoderHandle,
                          status: *mut int32_t) -> int32_t;
    pub fn HAL_GetEncoderRaw(encoderHandle: HAL_EncoderHandle,
                             status: *mut int32_t) -> int32_t;
    pub fn HAL_GetEncoderEncodingScale(encoderHandle: HAL_EncoderHandle,
                                       status: *mut int32_t) -> int32_t;
    pub fn HAL_ResetEncoder(encoderHandle: HAL_EncoderHandle,
                            status: *mut int32_t);
    pub fn HAL_GetEncoderPeriod(encoderHandle: HAL_EncoderHandle,
                                status: *mut int32_t) -> f64;
    pub fn HAL_SetEncoderMaxPeriod(encoderHandle: HAL_EncoderHandle,
                                   maxPeriod: f64, status: *mut int32_t);
    pub fn HAL_GetEncoderStopped(encoderHandle: HAL_EncoderHandle,
                                 status: *mut int32_t) -> HAL_Bool;
    pub fn HAL_GetEncoderDirection(encoderHandle: HAL_EncoderHandle,
                                   status: *mut int32_t) -> HAL_Bool;
    pub fn HAL_GetEncoderDistance(encoderHandle: HAL_EncoderHandle,
                                  status: *mut int32_t) -> f64;
    pub fn HAL_GetEncoderRate(encoderHandle: HAL_EncoderHandle,
                              status: *mut int32_t) -> f64;
    pub fn HAL_SetEncoderMinRate(encoderHandle: HAL_EncoderHandle,
                                 minRate: f64, status: *mut int32_t);
    pub fn HAL_SetEncoderDistancePerPulse(encoderHandle: HAL_EncoderHandle,
                                          distancePerPulse: f64,
                                          status: *mut int32_t);
    pub fn HAL_SetEncoderReverseDirection(encoderHandle: HAL_EncoderHandle,
                                          reverseDirection: HAL_Bool,
                                          status: *mut int32_t);
    pub fn HAL_SetEncoderSamplesToAverage(encoderHandle: HAL_EncoderHandle,
                                          samplesToAverage: int32_t,
                                          status: *mut int32_t);
    pub fn HAL_GetEncoderSamplesToAverage(encoderHandle: HAL_EncoderHandle,
                                          status: *mut int32_t) -> int32_t;
    pub fn HAL_SetEncoderIndexSource(encoderHandle: HAL_EncoderHandle,
                                     digitalSourceHandle: HAL_Handle,
                                     analogTriggerType: HAL_AnalogTriggerType,
                                     type_: HAL_EncoderIndexingType,
                                     status: *mut int32_t);
    pub fn HAL_GetEncoderFPGAIndex(encoderHandle: HAL_EncoderHandle,
                                   status: *mut int32_t) -> int32_t;
    pub fn HAL_GetEncoderDecodingScaleFactor(encoderHandle: HAL_EncoderHandle,
                                             status: *mut int32_t) -> f64;
    pub fn HAL_GetEncoderDistancePerPulse(encoderHandle: HAL_EncoderHandle,
                                          status: *mut int32_t) -> f64;
    pub fn HAL_GetEncoderEncodingType(encoderHandle: HAL_EncoderHandle,
                                      status: *mut int32_t)
     -> HAL_EncoderEncodingType;
    pub fn HAL_InitializeI2C(port: int32_t, status: *mut int32_t);
    pub fn HAL_TransactionI2C(port: int32_t, deviceAddress: int32_t,
                              dataToSend: *mut uint8_t, sendSize: int32_t,
                              dataReceived: *mut uint8_t,
                              receiveSize: int32_t) -> int32_t;
    pub fn HAL_WriteI2C(port: int32_t, deviceAddress: int32_t,
                        dataToSend: *mut uint8_t, sendSize: int32_t)
     -> int32_t;
    pub fn HAL_ReadI2C(port: int32_t, deviceAddress: int32_t,
                       buffer: *mut uint8_t, count: int32_t) -> int32_t;
    pub fn HAL_CloseI2C(port: int32_t);
    pub fn HAL_InitializeInterrupts(watcher: HAL_Bool, status: *mut int32_t)
     -> HAL_InterruptHandle;
    pub fn HAL_CleanInterrupts(interruptHandle: HAL_InterruptHandle,
                               status: *mut int32_t);
    pub fn HAL_WaitForInterrupt(interruptHandle: HAL_InterruptHandle,
                                timeout: f64, ignorePrevious: HAL_Bool,
                                status: *mut int32_t) -> int64_t;
    pub fn HAL_EnableInterrupts(interruptHandle: HAL_InterruptHandle,
                                status: *mut int32_t);
    pub fn HAL_DisableInterrupts(interruptHandle: HAL_InterruptHandle,
                                 status: *mut int32_t);
    pub fn HAL_ReadInterruptRisingTimestamp(interruptHandle:
                                                HAL_InterruptHandle,
                                            status: *mut int32_t) -> f64;
    pub fn HAL_ReadInterruptFallingTimestamp(interruptHandle:
                                                 HAL_InterruptHandle,
                                             status: *mut int32_t) -> f64;
    pub fn HAL_RequestInterrupts(interruptHandle: HAL_InterruptHandle,
                                 digitalSourceHandle: HAL_Handle,
                                 analogTriggerType: HAL_AnalogTriggerType,
                                 status: *mut int32_t);
    pub fn HAL_AttachInterruptHandler(interruptHandle: HAL_InterruptHandle,
                                      handler: HAL_InterruptHandlerFunction,
                                      param: *mut ::std::os::raw::c_void,
                                      status: *mut int32_t);
    pub fn HAL_AttachInterruptHandlerThreaded(interruptHandle:
                                                  HAL_InterruptHandle,
                                              handler:
                                                  HAL_InterruptHandlerFunction,
                                              param:
                                                  *mut ::std::os::raw::c_void,
                                              status: *mut int32_t);
    pub fn HAL_SetInterruptUpSourceEdge(interruptHandle: HAL_InterruptHandle,
                                        risingEdge: HAL_Bool,
                                        fallingEdge: HAL_Bool,
                                        status: *mut int32_t);
    pub fn HAL_InitializeNotifier(process: HAL_NotifierProcessFunction,
                                  param: *mut ::std::os::raw::c_void,
                                  status: *mut int32_t) -> HAL_NotifierHandle;
    pub fn HAL_InitializeNotifierThreaded(process:
                                              HAL_NotifierProcessFunction,
                                          param: *mut ::std::os::raw::c_void,
                                          status: *mut int32_t)
     -> HAL_NotifierHandle;
    pub fn HAL_CleanNotifier(notifierHandle: HAL_NotifierHandle,
                             status: *mut int32_t);
    pub fn HAL_GetNotifierParam(notifierHandle: HAL_NotifierHandle,
                                status: *mut int32_t)
     -> *mut ::std::os::raw::c_void;
    pub fn HAL_UpdateNotifierAlarm(notifierHandle: HAL_NotifierHandle,
                                   triggerTime: uint64_t,
                                   status: *mut int32_t);
    pub fn HAL_StopNotifierAlarm(notifierHandle: HAL_NotifierHandle,
                                 status: *mut int32_t);
    pub fn HAL_InitializePDP(module: int32_t, status: *mut int32_t);
    pub fn HAL_CheckPDPChannel(channel: int32_t) -> HAL_Bool;
    pub fn HAL_CheckPDPModule(module: int32_t) -> HAL_Bool;
    pub fn HAL_GetPDPTemperature(module: int32_t, status: *mut int32_t)
     -> f64;
    pub fn HAL_GetPDPVoltage(module: int32_t, status: *mut int32_t) -> f64;
    pub fn HAL_GetPDPChannelCurrent(module: int32_t, channel: int32_t,
                                    status: *mut int32_t) -> f64;
    pub fn HAL_GetPDPTotalCurrent(module: int32_t, status: *mut int32_t)
     -> f64;
    pub fn HAL_GetPDPTotalPower(module: int32_t, status: *mut int32_t) -> f64;
    pub fn HAL_GetPDPTotalEnergy(module: int32_t, status: *mut int32_t)
     -> f64;
    pub fn HAL_ResetPDPTotalEnergy(module: int32_t, status: *mut int32_t);
    pub fn HAL_ClearPDPStickyFaults(module: int32_t, status: *mut int32_t);
    pub fn HAL_InitializePWMPort(portHandle: HAL_PortHandle,
                                 status: *mut int32_t) -> HAL_DigitalHandle;
    pub fn HAL_FreePWMPort(pwmPortHandle: HAL_DigitalHandle,
                           status: *mut int32_t);
    pub fn HAL_CheckPWMChannel(channel: int32_t) -> HAL_Bool;
    pub fn HAL_SetPWMConfig(pwmPortHandle: HAL_DigitalHandle, maxPwm: f64,
                            deadbandMaxPwm: f64, centerPwm: f64,
                            deadbandMinPwm: f64, minPwm: f64,
                            status: *mut int32_t);
    pub fn HAL_SetPWMConfigRaw(pwmPortHandle: HAL_DigitalHandle,
                               maxPwm: int32_t, deadbandMaxPwm: int32_t,
                               centerPwm: int32_t, deadbandMinPwm: int32_t,
                               minPwm: int32_t, status: *mut int32_t);
    pub fn HAL_GetPWMConfigRaw(pwmPortHandle: HAL_DigitalHandle,
                               maxPwm: *mut int32_t,
                               deadbandMaxPwm: *mut int32_t,
                               centerPwm: *mut int32_t,
                               deadbandMinPwm: *mut int32_t,
                               minPwm: *mut int32_t, status: *mut int32_t);
    pub fn HAL_SetPWMEliminateDeadband(pwmPortHandle: HAL_DigitalHandle,
                                       eliminateDeadband: HAL_Bool,
                                       status: *mut int32_t);
    pub fn HAL_GetPWMEliminateDeadband(pwmPortHandle: HAL_DigitalHandle,
                                       status: *mut int32_t) -> HAL_Bool;
    pub fn HAL_SetPWMRaw(pwmPortHandle: HAL_DigitalHandle, value: int32_t,
                         status: *mut int32_t);
    pub fn HAL_SetPWMSpeed(pwmPortHandle: HAL_DigitalHandle, speed: f64,
                           status: *mut int32_t);
    pub fn HAL_SetPWMPosition(pwmPortHandle: HAL_DigitalHandle, position: f64,
                              status: *mut int32_t);
    pub fn HAL_SetPWMDisabled(pwmPortHandle: HAL_DigitalHandle,
                              status: *mut int32_t);
    pub fn HAL_GetPWMRaw(pwmPortHandle: HAL_DigitalHandle,
                         status: *mut int32_t) -> int32_t;
    pub fn HAL_GetPWMSpeed(pwmPortHandle: HAL_DigitalHandle,
                           status: *mut int32_t) -> f64;
    pub fn HAL_GetPWMPosition(pwmPortHandle: HAL_DigitalHandle,
                              status: *mut int32_t) -> f64;
    pub fn HAL_LatchPWMZero(pwmPortHandle: HAL_DigitalHandle,
                            status: *mut int32_t);
    pub fn HAL_SetPWMPeriodScale(pwmPortHandle: HAL_DigitalHandle,
                                 squelchMask: int32_t, status: *mut int32_t);
    pub fn HAL_GetLoopTiming(status: *mut int32_t) -> int32_t;
    pub fn HAL_GetNumAccumulators() -> int32_t;
    pub fn HAL_GetNumAnalogTriggers() -> int32_t;
    pub fn HAL_GetNumAnalogInputs() -> int32_t;
    pub fn HAL_GetNumAnalogOutputs() -> int32_t;
    pub fn HAL_GetNumCounters() -> int32_t;
    pub fn HAL_GetNumDigitalHeaders() -> int32_t;
    pub fn HAL_GetNumPWMHeaders() -> int32_t;
    pub fn HAL_GetNumDigitalChannels() -> int32_t;
    pub fn HAL_GetNumPWMChannels() -> int32_t;
    pub fn HAL_GetNumDigitalPWMOutputs() -> int32_t;
    pub fn HAL_GetNumEncoders() -> int32_t;
    pub fn HAL_GetNumInterrupts() -> int32_t;
    pub fn HAL_GetNumRelayChannels() -> int32_t;
    pub fn HAL_GetNumRelayHeaders() -> int32_t;
    pub fn HAL_GetNumPCMModules() -> int32_t;
    pub fn HAL_GetNumSolenoidChannels() -> int32_t;
    pub fn HAL_GetNumPDPModules() -> int32_t;
    pub fn HAL_GetNumPDPChannels() -> int32_t;
    pub fn HAL_GetVinVoltage(status: *mut int32_t) -> f64;
    pub fn HAL_GetVinCurrent(status: *mut int32_t) -> f64;
    pub fn HAL_GetUserVoltage6V(status: *mut int32_t) -> f64;
    pub fn HAL_GetUserCurrent6V(status: *mut int32_t) -> f64;
    pub fn HAL_GetUserActive6V(status: *mut int32_t) -> HAL_Bool;
    pub fn HAL_GetUserCurrentFaults6V(status: *mut int32_t) -> int32_t;
    pub fn HAL_GetUserVoltage5V(status: *mut int32_t) -> f64;
    pub fn HAL_GetUserCurrent5V(status: *mut int32_t) -> f64;
    pub fn HAL_GetUserActive5V(status: *mut int32_t) -> HAL_Bool;
    pub fn HAL_GetUserCurrentFaults5V(status: *mut int32_t) -> int32_t;
    pub fn HAL_GetUserVoltage3V3(status: *mut int32_t) -> f64;
    pub fn HAL_GetUserCurrent3V3(status: *mut int32_t) -> f64;
    pub fn HAL_GetUserActive3V3(status: *mut int32_t) -> HAL_Bool;
    pub fn HAL_GetUserCurrentFaults3V3(status: *mut int32_t) -> int32_t;
    pub fn HAL_InitializeRelayPort(portHandle: HAL_PortHandle, fwd: HAL_Bool,
                                   status: *mut int32_t) -> HAL_RelayHandle;
    pub fn HAL_FreeRelayPort(relayPortHandle: HAL_RelayHandle);
    pub fn HAL_CheckRelayChannel(channel: int32_t) -> HAL_Bool;
    pub fn HAL_SetRelay(relayPortHandle: HAL_RelayHandle, on: HAL_Bool,
                        status: *mut int32_t);
    pub fn HAL_GetRelay(relayPortHandle: HAL_RelayHandle,
                        status: *mut int32_t) -> HAL_Bool;
    pub fn HAL_InitializeSPI(port: int32_t, status: *mut int32_t);
    pub fn HAL_TransactionSPI(port: int32_t, dataToSend: *mut uint8_t,
                              dataReceived: *mut uint8_t, size: int32_t)
     -> int32_t;
    pub fn HAL_WriteSPI(port: int32_t, dataToSend: *mut uint8_t,
                        sendSize: int32_t) -> int32_t;
    pub fn HAL_ReadSPI(port: int32_t, buffer: *mut uint8_t, count: int32_t)
     -> int32_t;
    pub fn HAL_CloseSPI(port: int32_t);
    pub fn HAL_SetSPISpeed(port: int32_t, speed: int32_t);
    pub fn HAL_SetSPIOpts(port: int32_t, msbFirst: HAL_Bool,
                          sampleOnTrailing: HAL_Bool, clkIdleHigh: HAL_Bool);
    pub fn HAL_SetSPIChipSelectActiveHigh(port: int32_t,
                                          status: *mut int32_t);
    pub fn HAL_SetSPIChipSelectActiveLow(port: int32_t, status: *mut int32_t);
    pub fn HAL_GetSPIHandle(port: int32_t) -> int32_t;
    pub fn HAL_SetSPIHandle(port: int32_t, handle: int32_t);
    pub fn HAL_InitSPIAccumulator(port: int32_t, period: int32_t,
                                  cmd: int32_t, xferSize: int32_t,
                                  validMask: int32_t, validValue: int32_t,
                                  dataShift: int32_t, dataSize: int32_t,
                                  isSigned: HAL_Bool, bigEndian: HAL_Bool,
                                  status: *mut int32_t);
    pub fn HAL_FreeSPIAccumulator(port: int32_t, status: *mut int32_t);
    pub fn HAL_ResetSPIAccumulator(port: int32_t, status: *mut int32_t);
    pub fn HAL_SetSPIAccumulatorCenter(port: int32_t, center: int32_t,
                                       status: *mut int32_t);
    pub fn HAL_SetSPIAccumulatorDeadband(port: int32_t, deadband: int32_t,
                                         status: *mut int32_t);
    pub fn HAL_GetSPIAccumulatorLastValue(port: int32_t, status: *mut int32_t)
     -> int32_t;
    pub fn HAL_GetSPIAccumulatorValue(port: int32_t, status: *mut int32_t)
     -> int64_t;
    pub fn HAL_GetSPIAccumulatorCount(port: int32_t, status: *mut int32_t)
     -> int64_t;
    pub fn HAL_GetSPIAccumulatorAverage(port: int32_t, status: *mut int32_t)
     -> f64;
    pub fn HAL_GetSPIAccumulatorOutput(port: int32_t, value: *mut int64_t,
                                       count: *mut int64_t,
                                       status: *mut int32_t);
    pub fn HAL_InitializeSerialPort(port: HAL_SerialPort,
                                    status: *mut int32_t);
    pub fn HAL_SetSerialBaudRate(port: HAL_SerialPort, baud: int32_t,
                                 status: *mut int32_t);
    pub fn HAL_SetSerialDataBits(port: HAL_SerialPort, bits: int32_t,
                                 status: *mut int32_t);
    pub fn HAL_SetSerialParity(port: HAL_SerialPort, parity: int32_t,
                               status: *mut int32_t);
    pub fn HAL_SetSerialStopBits(port: HAL_SerialPort, stopBits: int32_t,
                                 status: *mut int32_t);
    pub fn HAL_SetSerialWriteMode(port: HAL_SerialPort, mode: int32_t,
                                  status: *mut int32_t);
    pub fn HAL_SetSerialFlowControl(port: HAL_SerialPort, flow: int32_t,
                                    status: *mut int32_t);
    pub fn HAL_SetSerialTimeout(port: HAL_SerialPort, timeout: f64,
                                status: *mut int32_t);
    pub fn HAL_EnableSerialTermination(port: HAL_SerialPort,
                                       terminator: ::std::os::raw::c_char,
                                       status: *mut int32_t);
    pub fn HAL_DisableSerialTermination(port: HAL_SerialPort,
                                        status: *mut int32_t);
    pub fn HAL_SetSerialReadBufferSize(port: HAL_SerialPort, size: int32_t,
                                       status: *mut int32_t);
    pub fn HAL_SetSerialWriteBufferSize(port: HAL_SerialPort, size: int32_t,
                                        status: *mut int32_t);
    pub fn HAL_GetSerialBytesReceived(port: HAL_SerialPort,
                                      status: *mut int32_t) -> int32_t;
    pub fn HAL_ReadSerial(port: HAL_SerialPort,
                          buffer: *mut ::std::os::raw::c_char, count: int32_t,
                          status: *mut int32_t) -> int32_t;
    pub fn HAL_WriteSerial(port: HAL_SerialPort,
                           buffer: *const ::std::os::raw::c_char,
                           count: int32_t, status: *mut int32_t) -> int32_t;
    pub fn HAL_FlushSerial(port: HAL_SerialPort, status: *mut int32_t);
    pub fn HAL_ClearSerial(port: HAL_SerialPort, status: *mut int32_t);
    pub fn HAL_CloseSerial(port: HAL_SerialPort, status: *mut int32_t);
    pub fn HAL_InitializeSolenoidPort(portHandle: HAL_PortHandle,
                                      status: *mut int32_t)
     -> HAL_SolenoidHandle;
    pub fn HAL_FreeSolenoidPort(solenoidPortHandle: HAL_SolenoidHandle);
    pub fn HAL_CheckSolenoidModule(module: int32_t) -> HAL_Bool;
    pub fn HAL_CheckSolenoidChannel(channel: int32_t) -> HAL_Bool;
    pub fn HAL_GetSolenoid(solenoidPortHandle: HAL_SolenoidHandle,
                           status: *mut int32_t) -> HAL_Bool;
    pub fn HAL_GetAllSolenoids(module: int32_t, status: *mut int32_t)
     -> int32_t;
    pub fn HAL_SetSolenoid(solenoidPortHandle: HAL_SolenoidHandle,
                           value: HAL_Bool, status: *mut int32_t);
    pub fn HAL_SetAllSolenoids(module: int32_t, state: int32_t,
                               status: *mut int32_t);
    pub fn HAL_GetPCMSolenoidBlackList(module: int32_t, status: *mut int32_t)
     -> int32_t;
    pub fn HAL_GetPCMSolenoidVoltageStickyFault(module: int32_t,
                                                status: *mut int32_t)
     -> HAL_Bool;
    pub fn HAL_GetPCMSolenoidVoltageFault(module: int32_t,
                                          status: *mut int32_t) -> HAL_Bool;
    pub fn HAL_ClearAllPCMStickyFaults(module: int32_t, status: *mut int32_t);
    pub fn __ctype_get_mb_cur_max() -> size_t;
    pub fn atof(__nptr: *const ::std::os::raw::c_char) -> f64;
    pub fn atoi(__nptr: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn atol(__nptr: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_long;
    pub fn atoll(__nptr: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_longlong;
    pub fn strtod(__nptr: *const ::std::os::raw::c_char,
                  __endptr: *mut *mut ::std::os::raw::c_char) -> f64;
    pub fn strtof(__nptr: *const ::std::os::raw::c_char,
                  __endptr: *mut *mut ::std::os::raw::c_char) -> f32;
    pub fn strtold(__nptr: *const ::std::os::raw::c_char,
                   __endptr: *mut *mut ::std::os::raw::c_char) -> f64;
    pub fn strtol(__nptr: *const ::std::os::raw::c_char,
                  __endptr: *mut *mut ::std::os::raw::c_char,
                  __base: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
    pub fn strtoul(__nptr: *const ::std::os::raw::c_char,
                   __endptr: *mut *mut ::std::os::raw::c_char,
                   __base: ::std::os::raw::c_int) -> ::std::os::raw::c_ulong;
    pub fn strtoq(__nptr: *const ::std::os::raw::c_char,
                  __endptr: *mut *mut ::std::os::raw::c_char,
                  __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_longlong;
    pub fn strtouq(__nptr: *const ::std::os::raw::c_char,
                   __endptr: *mut *mut ::std::os::raw::c_char,
                   __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_ulonglong;
    pub fn strtoll(__nptr: *const ::std::os::raw::c_char,
                   __endptr: *mut *mut ::std::os::raw::c_char,
                   __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_longlong;
    pub fn strtoull(__nptr: *const ::std::os::raw::c_char,
                    __endptr: *mut *mut ::std::os::raw::c_char,
                    __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_ulonglong;
    pub fn l64a(__n: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
    pub fn a64l(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
    pub fn select(__nfds: ::std::os::raw::c_int, __readfds: *mut fd_set,
                  __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                  __timeout: *mut timeval) -> ::std::os::raw::c_int;
    pub fn pselect(__nfds: ::std::os::raw::c_int, __readfds: *mut fd_set,
                   __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                   __timeout: *const timespec, __sigmask: *const __sigset_t)
     -> ::std::os::raw::c_int;
    pub fn gnu_dev_major(__dev: ::std::os::raw::c_ulonglong)
     -> ::std::os::raw::c_uint;
    pub fn gnu_dev_minor(__dev: ::std::os::raw::c_ulonglong)
     -> ::std::os::raw::c_uint;
    pub fn gnu_dev_makedev(__major: ::std::os::raw::c_uint,
                           __minor: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_ulonglong;
    pub fn random() -> ::std::os::raw::c_long;
    pub fn srandom(__seed: ::std::os::raw::c_uint);
    pub fn initstate(__seed: ::std::os::raw::c_uint,
                     __statebuf: *mut ::std::os::raw::c_char,
                     __statelen: size_t) -> *mut ::std::os::raw::c_char;
    pub fn setstate(__statebuf: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn random_r(__buf: *mut random_data, __result: *mut int32_t)
     -> ::std::os::raw::c_int;
    pub fn srandom_r(__seed: ::std::os::raw::c_uint, __buf: *mut random_data)
     -> ::std::os::raw::c_int;
    pub fn initstate_r(__seed: ::std::os::raw::c_uint,
                       __statebuf: *mut ::std::os::raw::c_char,
                       __statelen: size_t, __buf: *mut random_data)
     -> ::std::os::raw::c_int;
    pub fn setstate_r(__statebuf: *mut ::std::os::raw::c_char,
                      __buf: *mut random_data) -> ::std::os::raw::c_int;
    pub fn rand() -> ::std::os::raw::c_int;
    pub fn srand(__seed: ::std::os::raw::c_uint);
    pub fn rand_r(__seed: *mut ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
    pub fn drand48() -> f64;
    pub fn erand48(__xsubi: *mut ::std::os::raw::c_ushort) -> f64;
    pub fn lrand48() -> ::std::os::raw::c_long;
    pub fn nrand48(__xsubi: *mut ::std::os::raw::c_ushort)
     -> ::std::os::raw::c_long;
    pub fn mrand48() -> ::std::os::raw::c_long;
    pub fn jrand48(__xsubi: *mut ::std::os::raw::c_ushort)
     -> ::std::os::raw::c_long;
    pub fn srand48(__seedval: ::std::os::raw::c_long);
    pub fn seed48(__seed16v: *mut ::std::os::raw::c_ushort)
     -> *mut ::std::os::raw::c_ushort;
    pub fn lcong48(__param: *mut ::std::os::raw::c_ushort);
    pub fn drand48_r(__buffer: *mut drand48_data, __result: *mut f64)
     -> ::std::os::raw::c_int;
    pub fn erand48_r(__xsubi: *mut ::std::os::raw::c_ushort,
                     __buffer: *mut drand48_data, __result: *mut f64)
     -> ::std::os::raw::c_int;
    pub fn lrand48_r(__buffer: *mut drand48_data,
                     __result: *mut ::std::os::raw::c_long)
     -> ::std::os::raw::c_int;
    pub fn nrand48_r(__xsubi: *mut ::std::os::raw::c_ushort,
                     __buffer: *mut drand48_data,
                     __result: *mut ::std::os::raw::c_long)
     -> ::std::os::raw::c_int;
    pub fn mrand48_r(__buffer: *mut drand48_data,
                     __result: *mut ::std::os::raw::c_long)
     -> ::std::os::raw::c_int;
    pub fn jrand48_r(__xsubi: *mut ::std::os::raw::c_ushort,
                     __buffer: *mut drand48_data,
                     __result: *mut ::std::os::raw::c_long)
     -> ::std::os::raw::c_int;
    pub fn srand48_r(__seedval: ::std::os::raw::c_long,
                     __buffer: *mut drand48_data) -> ::std::os::raw::c_int;
    pub fn seed48_r(__seed16v: *mut ::std::os::raw::c_ushort,
                    __buffer: *mut drand48_data) -> ::std::os::raw::c_int;
    pub fn lcong48_r(__param: *mut ::std::os::raw::c_ushort,
                     __buffer: *mut drand48_data) -> ::std::os::raw::c_int;
    pub fn malloc(__size: size_t) -> *mut ::std::os::raw::c_void;
    pub fn calloc(__nmemb: size_t, __size: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn realloc(__ptr: *mut ::std::os::raw::c_void, __size: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn free(__ptr: *mut ::std::os::raw::c_void);
    pub fn cfree(__ptr: *mut ::std::os::raw::c_void);
    pub fn alloca(__size: size_t) -> *mut ::std::os::raw::c_void;
    pub fn valloc(__size: size_t) -> *mut ::std::os::raw::c_void;
    pub fn posix_memalign(__memptr: *mut *mut ::std::os::raw::c_void,
                          __alignment: size_t, __size: size_t)
     -> ::std::os::raw::c_int;
    pub fn aligned_alloc(__alignment: size_t, __size: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn abort();
    pub fn atexit(__func: ::std::option::Option<extern "C" fn()>)
     -> ::std::os::raw::c_int;
    pub fn at_quick_exit(__func: ::std::option::Option<extern "C" fn()>)
     -> ::std::os::raw::c_int;
    pub fn on_exit(__func:
                       ::std::option::Option<unsafe extern "C" fn(__status:
                                                                      ::std::os::raw::c_int,
                                                                  __arg:
                                                                      *mut ::std::os::raw::c_void)>,
                   __arg: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn exit(__status: ::std::os::raw::c_int);
    pub fn quick_exit(__status: ::std::os::raw::c_int);
    pub fn _Exit(__status: ::std::os::raw::c_int);
    pub fn getenv(__name: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn putenv(__string: *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn setenv(__name: *const ::std::os::raw::c_char,
                  __value: *const ::std::os::raw::c_char,
                  __replace: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn unsetenv(__name: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn clearenv() -> ::std::os::raw::c_int;
    pub fn mktemp(__template: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn mkstemp(__template: *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn mkstemps(__template: *mut ::std::os::raw::c_char,
                    __suffixlen: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn mkdtemp(__template: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn system(__command: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn realpath(__name: *const ::std::os::raw::c_char,
                    __resolved: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn bsearch(__key: *const ::std::os::raw::c_void,
                   __base: *const ::std::os::raw::c_void, __nmemb: size_t,
                   __size: size_t, __compar: __compar_fn_t)
     -> *mut ::std::os::raw::c_void;
    pub fn qsort(__base: *mut ::std::os::raw::c_void, __nmemb: size_t,
                 __size: size_t, __compar: __compar_fn_t);
    pub fn abs(__x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn labs(__x: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
    pub fn llabs(__x: ::std::os::raw::c_longlong)
     -> ::std::os::raw::c_longlong;
    pub fn div(__numer: ::std::os::raw::c_int, __denom: ::std::os::raw::c_int)
     -> div_t;
    pub fn ldiv(__numer: ::std::os::raw::c_long,
                __denom: ::std::os::raw::c_long) -> ldiv_t;
    pub fn lldiv(__numer: ::std::os::raw::c_longlong,
                 __denom: ::std::os::raw::c_longlong) -> lldiv_t;
    pub fn ecvt(__value: f64, __ndigit: ::std::os::raw::c_int,
                __decpt: *mut ::std::os::raw::c_int,
                __sign: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn fcvt(__value: f64, __ndigit: ::std::os::raw::c_int,
                __decpt: *mut ::std::os::raw::c_int,
                __sign: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn gcvt(__value: f64, __ndigit: ::std::os::raw::c_int,
                __buf: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn qecvt(__value: f64, __ndigit: ::std::os::raw::c_int,
                 __decpt: *mut ::std::os::raw::c_int,
                 __sign: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn qfcvt(__value: f64, __ndigit: ::std::os::raw::c_int,
                 __decpt: *mut ::std::os::raw::c_int,
                 __sign: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn qgcvt(__value: f64, __ndigit: ::std::os::raw::c_int,
                 __buf: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn ecvt_r(__value: f64, __ndigit: ::std::os::raw::c_int,
                  __decpt: *mut ::std::os::raw::c_int,
                  __sign: *mut ::std::os::raw::c_int,
                  __buf: *mut ::std::os::raw::c_char, __len: size_t)
     -> ::std::os::raw::c_int;
    pub fn fcvt_r(__value: f64, __ndigit: ::std::os::raw::c_int,
                  __decpt: *mut ::std::os::raw::c_int,
                  __sign: *mut ::std::os::raw::c_int,
                  __buf: *mut ::std::os::raw::c_char, __len: size_t)
     -> ::std::os::raw::c_int;
    pub fn qecvt_r(__value: f64, __ndigit: ::std::os::raw::c_int,
                   __decpt: *mut ::std::os::raw::c_int,
                   __sign: *mut ::std::os::raw::c_int,
                   __buf: *mut ::std::os::raw::c_char, __len: size_t)
     -> ::std::os::raw::c_int;
    pub fn qfcvt_r(__value: f64, __ndigit: ::std::os::raw::c_int,
                   __decpt: *mut ::std::os::raw::c_int,
                   __sign: *mut ::std::os::raw::c_int,
                   __buf: *mut ::std::os::raw::c_char, __len: size_t)
     -> ::std::os::raw::c_int;
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: size_t)
     -> ::std::os::raw::c_int;
    pub fn mbtowc(__pwc: *mut wchar_t, __s: *const ::std::os::raw::c_char,
                  __n: size_t) -> ::std::os::raw::c_int;
    pub fn wctomb(__s: *mut ::std::os::raw::c_char, __wchar: wchar_t)
     -> ::std::os::raw::c_int;
    pub fn mbstowcs(__pwcs: *mut wchar_t, __s: *const ::std::os::raw::c_char,
                    __n: size_t) -> size_t;
    pub fn wcstombs(__s: *mut ::std::os::raw::c_char, __pwcs: *const wchar_t,
                    __n: size_t) -> size_t;
    pub fn rpmatch(__response: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn getsubopt(__optionp: *mut *mut ::std::os::raw::c_char,
                     __tokens: *const *mut ::std::os::raw::c_char,
                     __valuep: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn getloadavg(__loadavg: *mut f64, __nelem: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn FRC_NetworkCommunication_nUsageReporting_report(resource: uint8_t,
                                                           instanceNumber:
                                                               uint8_t,
                                                           context: uint8_t,
                                                           feature:
                                                               *const ::std::os::raw::c_char)
     -> uint32_t;
    pub fn HAL_GetErrorMessage(code: int32_t)
     -> *const ::std::os::raw::c_char;
    pub fn HAL_GetFPGAVersion(status: *mut int32_t) -> int32_t;
    pub fn HAL_GetFPGARevision(status: *mut int32_t) -> int64_t;
    pub fn HAL_GetRuntimeType() -> HAL_RuntimeType;
    pub fn HAL_GetFPGAButton(status: *mut int32_t) -> HAL_Bool;
    pub fn HAL_GetSystemActive(status: *mut int32_t) -> HAL_Bool;
    pub fn HAL_GetBrownedOut(status: *mut int32_t) -> HAL_Bool;
    pub fn HAL_BaseInitialize(status: *mut int32_t);
    pub fn HAL_GetPort(channel: int32_t) -> HAL_PortHandle;
    pub fn HAL_GetPortWithModule(module: int32_t, channel: int32_t)
     -> HAL_PortHandle;
    pub fn HAL_GetFPGATime(status: *mut int32_t) -> uint64_t;
    pub fn HAL_Initialize(mode: int32_t) -> int32_t;
    pub fn HAL_Report(resource: int32_t, instanceNumber: int32_t,
                      context: int32_t,
                      feature: *const ::std::os::raw::c_char) -> int64_t;
}
